{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavButtons","href","NavBar","props","React","useState","mobileOpen","setMobileOpen","isMobile","dimensions","width","className","onClick","e","console","log","target","parentElement","prev","id","Registration","action","for","type","userPack","handleLogin","App","toggleRegistration","x","classList","toggle","document","querySelector","updateDimensions","w","window","d","documentElement","body","getElementsByTagName","innerWidth","clientWidth","height","innerHeight","clientHeight","state","newDimensions","setState","newStatus","logged","addEventListener","this","removeEventListener","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4669f9cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst EmptyFunction=()=>{\n  return(\n    <>\n    </>\n  )\n}\n\nconst NavButtons=()=>{\n  return(\n    <>\n                  <li><a href=\"#\">Home</a></li>\n              <li><a href=\"#\">About</a></li>\n              <li><a href=\"#\">Portfolio</a></li>\n              <li><a href=\"#\">Contact</a></li>\n    </>\n  )\n}\nconst NavBar=(props)=>{\n  const [mobileOpen, setMobileOpen]=React.useState(false);\n  const toggleRegistration=(e)=>{\n    console.log(e.target.parentElement)\n    setMobileOpen(prev=>!prev)\n    console.log(mobileOpen)\n  }\n\n  const isMobile=props.dimensions.width<769\n  return(\n    <>\n        <header className=\"header\">\n        \n            {isMobile?\n            <>\n              <div className={mobileOpen?\"burguer change\":\"burguer\"} onClick={toggleRegistration}>\n        \n                <div className=\"bar1\"></div>\n                <div className=\"bar2\"></div>\n                <div className=\"bar3\"></div>\n              </div>\n                <ul className={mobileOpen?\"main-nav\":\"main-nav closed\"} id=\"navContent\">\n\n                <NavButtons/>\n                </ul>\n              </>\n            :\n            <>\n            <h1 className=\"logo\"><a href=\"#\">TELEXFREE</a></h1>\n            <ul className=\"main-nav\" id=\"navContent\">\n          <NavButtons/>\n      </ul>\n      </>\n    }\n          \n\n\n\n        </header> \n    </>\n  )\n}\nconst Registration=(props)=>{\n  const [registration,setRegistration]=React.useState(false)\n  const [username,setUsername]=React.useState(\"\")\n  const [password,setPassword]=React.useState(\"\")\n  const handleLogin=()=>{\n    props.userPack.handleLogin()\n  }\n  const toggleRegistration=()=>{\n    setRegistration(prev=>!prev)\n  }\n  return(\n    <>\n    <div className=\"login-container\">\n\t<form action=\"\" className=\"form-login\">\n\t\t<ul className=\"login-nav\">\n\t\t\t<li className=\"login-nav__item active\">\n\t\t\t\t<a href=\"#\">Sign In</a>\n\t\t\t</li>\n\t\t\t<li className=\"login-nav__item\">\n\t\t\t\t<a href=\"#\">Sign Up</a>\n\t\t\t</li>\n\t\t</ul>\n\t\t<label for=\"login-input-user\" className=\"login__label\">\n\t\t\tUsername\n\t\t</label>\n\t\t<input id=\"login-input-user\" className=\"login__input\" type=\"text\" />\n\t\t<label for=\"login-input-password\" className=\"login__label\">\n\t\t\tPassword\n\t\t</label>\n\t\t<input id=\"login-input-password\" className=\"login__input\" type=\"password\" />\n\t\t<label for=\"login-sign-up\" className=\"login__label--checkbox\">\n\t\t\t<input id=\"login-sign-up\" type=\"checkbox\" className=\"login__input--checkbox\" />\n\t\t\tKeep me Signed in\n\t\t</label>\n\t\t<button className=\"login__submit\" onClick={handleLogin}>Sign in</button>\n\t</form>\n\t<a href=\"#\" className=\"login__forgot\">Forgot Password?</a>\n</div>\n    </>\n  )\n}\nclass App extends Component {\n  toggleRegistration = (x) =>{\n    x.target.classList.toggle(\"change\");\n    let element = document.querySelector('#navContent')\n    element.classList.toggle('closed')\n    //console.log(\"success\",element)\n  }\n\n  updateDimensions=()=>{\n    const w = window;\n    const d = document;\n    const documentElement = d.documentElement;\n    const body = d.getElementsByTagName('body')[0];\n    const width = w.innerWidth || documentElement.clientWidth || body.clientWidth;\n    const height = w.innerHeight || documentElement.clientHeight || body.clientHeight;\n    if(height-this.state.dimensions.height<60 &&height-this.state.dimensions.height>0 || width-this.state.dimensions.width===0){\n      return\n    }\n    if (width < 960){\n      const newDimensions={width:width, height:height, isMobile:false}\n      this.setState({dimensions:newDimensions})\n      return\n    }\n    const newDimensions={width:width, height:height, isMobile:false}\n    this.setState({dimensions:newDimensions})\n  }\n  constructor(props){\n    super(props)\n    window.addEventListener(\"resize\", this.updateDimensions);\n    const w = window;\n    const d = document;\n    const documentElement = d.documentElement;\n    const body = d.getElementsByTagName('body')[0];\n    const width = w.innerWidth || documentElement.clientWidth || body.clientWidth;\n    const height = w.innerHeight || documentElement.clientHeight || body.clientHeight;\n    this.state={\n      logged:false,dimensions:{width:width, height:height, isMobile:false}\n    }\n  }\n  componentDidUpdate(){\n    window.addEventListener(\"resize\", this.updateDimensions);\n  };\n  componentWillMount(){\n    this.updateDimensions();\n  }\n  componentWillUnmount(){\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n  handleLogin=()=>{\n    const newStatus=!this.state.logged\n    this.setState({logged:newStatus})\n  }\n  render() {\n    const userPack={dimensions:this.state.dimensions,\n      logged:this.state.logged,handleLogin:this.handleLogin}\n    return ( \n      <>\n      {this.state.logged?\n      <>\n        <NavBar dimensions={this.state.dimensions}/>\n\n        {/* \n        <div className=\"row center\">\n          <div>\n              <div className=\"myCircle2\">\n                  <div className=\"myCircle\">\n                    </div>\n                </div>\n\n          </div>\n\n\n        </div>\n        */}\n        </>\n      :\n      <Registration userPack={userPack}/>\n      }\n\n      </>\n     );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}